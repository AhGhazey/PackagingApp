// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add-packages": {
            "post": {
                "description": "Add packages to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packages"
                ],
                "summary": "Add packages",
                "parameters": [
                    {
                        "description": "Request body with packages to add",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.AddPackagesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Packages added successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.AddPackagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or package size",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/calculate-packages": {
            "post": {
                "description": "Calculate the minimum number of packages required for a given amount of items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packages"
                ],
                "summary": "Calculate required packages",
                "parameters": [
                    {
                        "description": "Request body with the amount of items",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CalculatePackagesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Minimum number of packages calculated successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.CalculatePackagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or amount",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "get request to check service health",
                "produces": [
                    "application/json"
                ],
                "summary": "get request to check service health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.HealthResponse"
                        }
                    },
                    "408": {
                        "description": "fail",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "fail",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.AddPackagesRequest": {
            "type": "object",
            "properties": {
                "packages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest.Package"
                    }
                }
            }
        },
        "rest.AddPackagesResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "rest.CalculatePackagesRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "rest.CalculatePackagesResponse": {
            "type": "object",
            "properties": {
                "packages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest.SizedPackage"
                    }
                }
            }
        },
        "rest.HealthResponse": {
            "type": "object",
            "properties": {
                "isAlive": {
                    "type": "boolean"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "rest.Package": {
            "type": "object",
            "properties": {
                "size": {
                    "type": "integer"
                }
            }
        },
        "rest.SizedPackage": {
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
